{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categos","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","setTimeout","propTypes","PropTypes","string","isRequired","GifGrid","GifExpertApp","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"4MAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAK3BR,GAAc,SAAAS,GAAO,OAAKP,GAAL,mBAAoBO,OAGzCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCRlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OADAC,QAAQC,IAAKJ,EAAIC,EAAOC,GAEpB,sBAAKG,UAAU,kEAAf,UACI,qBAAKC,IAAMJ,EAAMK,IAAMN,IACvB,4BAAIA,Q,uBCNVO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNR,EADM,yFACkFS,UAAUF,GAD5F,sBAEOG,MAAMV,GAFb,cAENW,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAT9B,kBAkBLc,GAlBK,4CAAH,sD,OCGAK,EAAe,SAACZ,GAAc,IAAD,EACZvB,mBACtB,CACI6B,KAAM,GACNO,SAAS,IAJqB,mBAC/BC,EAD+B,KACxBC,EADwB,KAwBtC,OAjBAC,qBAAU,WAENjB,EAAQC,GACHiB,MAAK,SAAAC,GACFC,YAAW,WAEPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEd,UAIZ,CAACb,IAGGc,GAIXF,EAAaQ,UAAY,CACrBpB,S,OAAUqB,EAAUC,OAAOC,YC7BxB,IAAMC,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,EAEXY,EAAaZ,GAA/BM,EAF6B,EAE7BA,KAAMO,EAFuB,EAEvBA,QAEd,OACI,qCACI,6BAAKb,IACJa,GAAW,wCACZ,qBAAKjB,UAAU,YAAf,SAEQU,EAAKE,KAAI,SAACC,GAAD,OACL,cAAC,EAAD,eAEQA,GADCA,EAAIlB,aCV/BkC,EAAe,WAAO,IAAD,EAEahD,mBAAS,CAAC,cAFvB,mBAEhBiD,EAFgB,KAEJlD,EAFI,KAGvB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAGQkD,EAAWlB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCTvB2B,EAAUC,SAASC,eAAe,QAExCC,IAASC,OACP,cAAC,EAAD,IACAJ,K","file":"static/js/main.201b3605.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) { // que el string sea mayor que 2 caracteres\r\n            \r\n             \r\n            //setCategories(categos => [...categos, inputValue]);\r\n            \r\n            setCategories(categos => [inputValue, ...categos]); \r\n            // con esto colocalmos la última string recibida como la 1ra\r\n\r\n            setInputValue(''); // cambiamos a setValue como vacío para vaciar el input al submit\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    console.log( id, title, url );\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeftBig animate__delay-2s\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{title}</p>\r\n            {/* {props.img.title} */}\r\n        </div>\r\n    )\r\n}\r\n","\r\nconst getGifs = async (category) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=4pFZvazNOohden9CkXMyzuOPS9hNCKSF&q=${encodeURI(category)}&limit=10`;   \r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    // console.log('gifs');\r\n    // console.log(gifs);\r\n    // console.log('Setimages(gifs)');\r\n    //setImages(gifs);\r\n    // console.log(setImages(gifs));\r\n    return gifs;\r\n\r\n}\r\n\r\nexport {\r\n    getGifs as default\r\n}","import { useState, useEffect } from \"react\"\r\nimport getGifs from '../helpers/getGifs'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                }, 3000);\r\n                \r\n            });\r\n\r\n    }, [category]);\r\n\r\n\r\n    return state; // --> data:[], loading: true };\r\n}\r\n\r\n// PropTypes no funciona con HOOKS\r\nuseFetchGifs.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { Fragment } from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One punch']);\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                \r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                        key={category}\r\n                        category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport {\r\n    GifExpertApp,\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n/*\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n*/\n\nconst divRoot = document.getElementById('root');\n\nReactDOM.render(\n  <GifExpertApp />,\n  divRoot\n);\n\n\n"],"sourceRoot":""}